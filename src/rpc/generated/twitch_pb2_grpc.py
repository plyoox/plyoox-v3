# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import twitch_pb2 as twitch__pb2


class TwitchNotificationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LiveNotification = channel.unary_unary(
            "/Twitch.TwitchNotification/LiveNotification",
            request_serializer=twitch__pb2.TwitchLiveNotification.SerializeToString,
            response_deserializer=twitch__pb2.Empty.FromString,
        )
        self.OfflineNotification = channel.unary_unary(
            "/Twitch.TwitchNotification/OfflineNotification",
            request_serializer=twitch__pb2.TwitchOfflineNotification.SerializeToString,
            response_deserializer=twitch__pb2.Empty.FromString,
        )
        self.OAuthAuthorization = channel.unary_unary(
            "/Twitch.TwitchNotification/OAuthAuthorization",
            request_serializer=twitch__pb2.OAuthCode.SerializeToString,
            response_deserializer=twitch__pb2.TwitchUser.FromString,
        )
        self.OAuthBaseUrl = channel.unary_unary(
            "/Twitch.TwitchNotification/OAuthBaseUrl",
            request_serializer=twitch__pb2.CreateOAuthUrl.SerializeToString,
            response_deserializer=twitch__pb2.OAuthUrlResponse.FromString,
        )
        self.RemoveGuildAccount = channel.unary_unary(
            "/Twitch.TwitchNotification/RemoveGuildAccount",
            request_serializer=twitch__pb2.RemoveAccount.SerializeToString,
            response_deserializer=twitch__pb2.Empty.FromString,
        )
        self.AddNotification = channel.unary_unary(
            "/Twitch.TwitchNotification/AddNotification",
            request_serializer=twitch__pb2.AddTwitchNotification.SerializeToString,
            response_deserializer=twitch__pb2.TwitchUser.FromString,
        )
        self.RemoveNotification = channel.unary_unary(
            "/Twitch.TwitchNotification/RemoveNotification",
            request_serializer=twitch__pb2.RemoveTwitchNotification.SerializeToString,
            response_deserializer=twitch__pb2.Empty.FromString,
        )


class TwitchNotificationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LiveNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OfflineNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OAuthAuthorization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OAuthBaseUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveGuildAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TwitchNotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "LiveNotification": grpc.unary_unary_rpc_method_handler(
            servicer.LiveNotification,
            request_deserializer=twitch__pb2.TwitchLiveNotification.FromString,
            response_serializer=twitch__pb2.Empty.SerializeToString,
        ),
        "OfflineNotification": grpc.unary_unary_rpc_method_handler(
            servicer.OfflineNotification,
            request_deserializer=twitch__pb2.TwitchOfflineNotification.FromString,
            response_serializer=twitch__pb2.Empty.SerializeToString,
        ),
        "OAuthAuthorization": grpc.unary_unary_rpc_method_handler(
            servicer.OAuthAuthorization,
            request_deserializer=twitch__pb2.OAuthCode.FromString,
            response_serializer=twitch__pb2.TwitchUser.SerializeToString,
        ),
        "OAuthBaseUrl": grpc.unary_unary_rpc_method_handler(
            servicer.OAuthBaseUrl,
            request_deserializer=twitch__pb2.CreateOAuthUrl.FromString,
            response_serializer=twitch__pb2.OAuthUrlResponse.SerializeToString,
        ),
        "RemoveGuildAccount": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveGuildAccount,
            request_deserializer=twitch__pb2.RemoveAccount.FromString,
            response_serializer=twitch__pb2.Empty.SerializeToString,
        ),
        "AddNotification": grpc.unary_unary_rpc_method_handler(
            servicer.AddNotification,
            request_deserializer=twitch__pb2.AddTwitchNotification.FromString,
            response_serializer=twitch__pb2.TwitchUser.SerializeToString,
        ),
        "RemoveNotification": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveNotification,
            request_deserializer=twitch__pb2.RemoveTwitchNotification.FromString,
            response_serializer=twitch__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Twitch.TwitchNotification", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TwitchNotification(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LiveNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/LiveNotification",
            twitch__pb2.TwitchLiveNotification.SerializeToString,
            twitch__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OfflineNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/OfflineNotification",
            twitch__pb2.TwitchOfflineNotification.SerializeToString,
            twitch__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OAuthAuthorization(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/OAuthAuthorization",
            twitch__pb2.OAuthCode.SerializeToString,
            twitch__pb2.TwitchUser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OAuthBaseUrl(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/OAuthBaseUrl",
            twitch__pb2.CreateOAuthUrl.SerializeToString,
            twitch__pb2.OAuthUrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RemoveGuildAccount(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/RemoveGuildAccount",
            twitch__pb2.RemoveAccount.SerializeToString,
            twitch__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AddNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/AddNotification",
            twitch__pb2.AddTwitchNotification.SerializeToString,
            twitch__pb2.TwitchUser.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RemoveNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Twitch.TwitchNotification/RemoveNotification",
            twitch__pb2.RemoveTwitchNotification.SerializeToString,
            twitch__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
